import { resolveAllImports, hasImports, findAndRemoveImports } from '@mintlify/common';
import { outputFile } from 'fs-extra';
import { join } from 'path';
import { getPageMetadataAndSlug } from '../../createPage/getPageMetadataAndSlug.js';
export class ImportResolver {
    constructor(contentDirectoryPath, openApiFiles, pagesAcc, snippetsV2, filesWithImports) {
        this.contentDirectoryPath = contentDirectoryPath;
        this.openApiFiles = openApiFiles;
        this.pagesAcc = pagesAcc;
        this.snippetsV2 = snippetsV2;
        this.filesWithImports = filesWithImports;
    }
    static writeFiles(updateOrchestrator, pagesAcc, snippetsV2, filesWithImports) {
        return new ImportResolver(updateOrchestrator.contentDirectoryPath, updateOrchestrator.openApiFiles, pagesAcc, snippetsV2, filesWithImports).writeFiles();
    }
    async writeFiles() {
        const snippetsWithResolvedImports = this.resolveImportsInSnippets();
        const writeSnippetsWithImportsPromises = this.writeSnippets(snippetsWithResolvedImports);
        const pagesWithResolvedImports = this.resolveImportsInPages();
        const writePagesPromise = this.writePages(pagesWithResolvedImports);
        await Promise.all([...writeSnippetsWithImportsPromises, ...writePagesPromise]);
        return this.pagesAcc;
    }
    resolveImportsInSnippets() {
        const snippetsWithImports = this.snippetsV2.map((snippet) => ({
            ...findAndRemoveImports(snippet.content),
            filename: snippet.filename,
        }));
        snippetsWithImports.sort((a, b) => a.imports.length - b.imports.length);
        snippetsWithImports.forEach((snippetWithImports) => {
            if (hasImports(snippetWithImports)) {
                snippetWithImports.content = resolveAllImports({
                    snippets: this.snippetsV2,
                    fileWithImports: snippetWithImports,
                });
            }
        });
        return snippetsWithImports;
    }
    writeSnippets(snippetsWithImports) {
        return snippetsWithImports.map(async (snippetWithImports) => {
            const targetPath = join('public', snippetWithImports.filename);
            await outputFile(targetPath, snippetWithImports.content, {
                flag: 'w',
            });
        });
    }
    resolveImportsInPages() {
        const filesWithResolvedImports = this.filesWithImports.map((fileWithImports) => {
            const content = resolveAllImports({
                snippets: this.snippetsV2,
                fileWithImports,
            });
            const { slug, pageMetadata } = getPageMetadataAndSlug(fileWithImports.filename, content, this.openApiFiles);
            this.pagesAcc = {
                ...this.pagesAcc,
                [slug]: pageMetadata,
            };
            const targetPath = join('src', '_props', fileWithImports.filename);
            return {
                targetPath,
                content,
            };
        });
        return filesWithResolvedImports;
    }
    writePages(filesWithResolvedImports) {
        return filesWithResolvedImports.map(async ({ targetPath, content }) => {
            await outputFile(targetPath, content, {
                flag: 'w',
            });
        });
    }
}
