import matter from 'gray-matter';
import { remark } from 'remark';
import { visit } from 'unist-util-visit';
import { coreRemarkMdxPlugins, getAST } from '../../remark.js';
import { isMdxJsxFlowElement } from '../../utils.js';
/**
 *
 * @param content The content to inject into
 * @param componentName The component name we are injecting into
 * @param contentToInject The content to inject in place of the component
 */
export const resolveComponentWithContent = (content, componentName, contentToInject) => {
    const { content: contentToInjectWithoutFrontmatter } = matter(contentToInject);
    const snippet = getAST(contentToInjectWithoutFrontmatter);
    const convertedContent = remark()
        .use(coreRemarkMdxPlugins)
        .use(remarkMdxResolveComponentWithContent(snippet, componentName))
        .processSync(content);
    return String(convertedContent);
};
/**
 * Everywhere where there is a component with the name `componentName`, replace it with the `treeToInject`
 * This function is used to resolve default imports
 * @param treeToInject
 * @param componentName
 * @returns
 */
const remarkMdxResolveComponentWithContent = (treeToInject, componentName) => () => (tree) => {
    visit(tree, isMdxJsxFlowElement, (node, i, parent) => {
        if (node.name === componentName && parent && i != null) {
            node.name = null;
            parent.children.splice(i, 1, ...treeToInject.children);
        }
    });
};
